AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
        - email
        - preferred_username
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: true
        - Name: name
          Required: true
          Mutable: true
        - Name: preferred_username
          Mutable: true
        - Name: pentair_username
          AttributeDataType: String
          Mutable: true
        - Name: pentair_password
          AttributeDataType: String
          Mutable: true
  WebUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AWS::StackName}-WebUserPoolClient
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - https://localhost:3000
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref UserPool
  StUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AWS::StackName}-StUserPoolClient
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - https://localhost:3000
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: true
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref UserPool
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: freeflow-dev
  getEvent:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getEvent
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: getEvent
      CodeUri: src/getEvent
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - S3CrudPolicy:
            BucketName: !Ref frontEnd
      Environment:
        Variables:
          BUCKET_NAME: !Ref frontEnd
          BUCKET_ARN: !GetAtt frontEnd.Arn
      Events:
        stSchemaConnectorGET:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId: !Ref stSchemaConnector
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 29000
  stSchemaConnector:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefinitionBody:
        openapi: '3.0'
        info:
          title: !Sub ${AWS::StackName}-HttpApi
          version: '1.0'
        paths:
          /:
            get:
              responses: {}
          /stSchema:
            post:
              responses: {}
      FailOnWarnings: true
      Auth:
        DefaultAuthorizer: webAuthorizer
        Authorizers:
          webAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
              audience:
                - !Ref WebUserPoolClient
          stAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
              audience:
                - !Ref StUserPoolClient
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - '*'
  deployFrontEnd:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-deployFrontEnd
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: deployFrontEnd
      CodeUri: src/deployFrontEnd
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - S3CrudPolicy:
            BucketName: !Ref frontEnd
      Environment:
        Variables:
          BUCKET_NAME: !Ref frontEnd
          BUCKET_ARN: !GetAtt frontEnd.Arn
  deployFrontEndDeployTrigger:
    Type: Custom::FunctionDeployTrigger
    Properties:
      ServiceToken: !GetAtt deployFrontEnd.Arn
      DeploymentTimestamp: !Ref DeploymentTimestamp
  frontEnd:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-frontend-${AWS::AccountId}
      WebsiteConfiguration:
        IndexDocument: index.html
  stSchema:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-stSchema
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: stSchema
      CodeUri: src/stSchema
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
  stSchemaProxy:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-stSchemaProxy
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: stSchemaProxy
      CodeUri: src/stSchemaProxy
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - LambdaInvokePolicy:
            FunctionName: !Ref stSchema
      Events:
        stSchemaConnectorPOSTstSchema:
          Type: HttpApi
          Properties:
            Path: /stSchema
            Method: POST
            ApiId: !Ref stSchemaConnector
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 29000
            Auth:
              Authorizer: NONE
      Environment:
        Variables:
          FUNCTION_NAME: !Ref stSchema
          FUNCTION_ARN: !GetAtt stSchema.Arn
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  DeploymentTimestamp:
    Type: Number
    Description: Deployment preparation timestamp in milliseconds Since Epoch (injected by Stackery at deployment time)